{"version":3,"sources":["components/styled/Button.ts","components/styled/Nav.ts","components/styled/ScreenCentered.ts","components/styled/FlexContainer.ts","components/styled/Container.ts","components/styled/Links.ts","reducers/settings.reducer.ts","data/localStorage.ts","data/settings.ts","Contexts/Settings.tsx","config.ts","pages/Home/Home.tsx","pages/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getClassNames","type","Button","styled","button","attrs","props","className","nav","ScreenCentered","div","FlexContainer","Container","width","ListContainer","List","ul","ListItem","li","initialState","base","poll","currencies","balances","EUR","GBP","USD","transactions","settingsReducer","state","action","payload","from","amount","currency","to","fromBalance","toBalance","fromAmount","toAmount","updates","timestamp","Number","Date","KEY","NAMESPACE","STORE","window","localStorage","getData","key","_data","getItem","data","JSON","parse","value","setItem","stringify","saveSettings","LS","SettingsContext","React","createContext","settings","updateSettings","exchangeAmount","Provider","SettingsProvider","Consumer","children","useReducer","dispatch","useEffect","getSettings","saveAppState","params","ENDPOINTS","RATES","CURRENCIES","API","REMOTE","Home","data-testid","as","Link","Welcome","Balance","loadable","Exchange","Settings","Transactions","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39f18ba1.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst getClassNames = (type?: string): string => {\n  switch (type) {\n    case \"outline\":\n      return \"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\";\n    default:\n      return \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\";\n  }\n};\n\ntype Props = {\n  type?: string;\n};\n\nexport const Button = styled.button.attrs((props: Props) => ({\n  className: getClassNames(props.type),\n}))``;\n","import styled from \"styled-components\";\n\nexport const Nav = styled.nav``;\n","import styled from \"styled-components\";\n\nexport const ScreenCentered = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n`;","import styled from \"styled-components\";\n\nexport const FlexContainer = styled.div`\n  display: flex;\n  align-items: center;\n  & > * {\n    flex: 1 auto;\n    width: 50%;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div<{ width?: string }>`\n  max-width: ${(props) => props.width || \"320px\"};\n  width: ${(props) => props.width || \"auto\"};\n  padding: 1rem 0;\n  border: 1px solid #efefef;\n  border-radius: 10px;\n  box-shadow: 0 0 10px 0 rgba(100, 100, 100, 0.3);\n  margin: 0.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  display: table;\n  width: auto;\n  margin: 0.5rem auto;\n  border-collapse: collapse;\n`;\nexport const List = styled.ul`\n  border-radius: 5px;\n  border: 1px solid #dedede;\n  list-style: none;\n  padding: 0;\n  display: table-row;\n`;\nexport const ListItem = styled.li`\n  display: inline-block;\n  border: 1px solid #dedede;\n  padding: 0.3rem 0.8rem;\n  display: table-cell;\n`;\n","import { Reducer, Settings, Action, ExchangeParams } from \"../types\";\n\nexport const initialState: Settings = {\n  base: \"EUR\",\n  poll: 10 * 1000,\n  currencies: [\"EUR\", \"GBP\", \"USD\"],\n  balances: {\n    EUR: 100,\n    GBP: 0,\n    USD: 0,\n  },\n  transactions: [],\n};\n\nexport const settingsReducer: Reducer<Settings, Action> = (\n  state = initialState,\n  action\n) => {\n  const { type, payload } = action;\n  const { balances, transactions = [] } = state;\n  switch (type) {\n    case \"SETTINGS_UPDATED\":\n      return {\n        ...state,\n        ...payload,\n      };\n    case \"EXCHANGE_INITIATED\":\n      if (!payload?.from.amount || payload?.from.amount <= 0) {\n        return state;\n      }\n      if (!payload?.from.currency || !payload?.to.currency) {\n        return state;\n      }\n      const fromBalance = balances[payload?.from.currency];\n      if (fromBalance < payload?.from.amount) {\n        return state;\n      }\n      const toBalance = balances[payload?.to.currency];\n      const fromAmount = payload?.from.amount;\n      const toAmount = payload?.to.amount;\n      const updates = {\n        balances: {\n          [payload?.from.currency]: fromBalance - fromAmount,\n          [payload?.to.currency]: toBalance + toAmount,\n        },\n        transactions: [\n          {\n            ...(payload as ExchangeParams),\n            timestamp: Number(new Date()),\n          },\n          ...transactions,\n        ],\n      };\n      return { ...state, ...updates };\n    default:\n      return state;\n  }\n};\n","import { NAMESPACE } from \"../config\";\n\nconst KEY = NAMESPACE as string;\nconst STORE = window.localStorage;\n\nconst getData = (key: string | null = null): any => {\n  const _data = STORE.getItem(KEY);\n  const data = _data ? JSON.parse(_data) : {};\n  return key ? data[key] : data;\n};\n\nconst setData = (key: string, value: any): void => {\n  STORE.setItem(\n    KEY,\n    JSON.stringify({\n      ...getData(),\n      [key]: value,\n    })\n  );\n};\n\nexport default {\n  get: getData,\n  set: setData,\n  remove: (key: string) => {\n    if (!key) {\n      return;\n    }\n    const data = getData();\n    delete data[key];\n    STORE.setItem(KEY, JSON.stringify(data));\n  },\n};\n","import LS from \"./localStorage\";\nimport { Settings } from \"../types\";\n\nexport const getSettings = (key: string | null = null): Settings => LS.get(key);\nexport const saveSettings = (key: string, value: any): void => {\n  LS.set(key, value);\n};\n","import React, { useReducer, useEffect, PropsWithChildren } from \"react\";\nimport { settingsReducer, initialState } from \"../reducers/settings.reducer\";\nimport { SettingsContextType, ExchangeParams, Settings } from \"../types\";\nimport { getSettings, saveSettings } from \"../data/settings\";\n\nconst SettingsContext = React.createContext<SettingsContextType>({\n  settings: initialState,\n  updateSettings: () => {},\n  exchangeAmount: () => {},\n});\n\nconst { Provider, Consumer } = SettingsContext;\n\nexport const SettingsProvider = ({ children }: PropsWithChildren<{}>) => {\n  const [settings, dispatch] = useReducer(settingsReducer, initialState);\n  const saveAppState = (data: Settings) => {\n    const timestamp = Number(new Date());\n    saveSettings(\"app\", data);\n    saveSettings(\"timestamp\", timestamp);\n  };\n\n  useEffect(() => {\n    updateSettings(getSettings(\"app\"));\n  }, []);\n\n  useEffect(() => {\n    saveAppState(settings);\n  }, [settings]);\n\n  const updateSettings = (payload: object) => {\n    dispatch({\n      type: \"SETTINGS_UPDATED\",\n      payload,\n    });\n  };\n  const exchangeAmount = (params: ExchangeParams) => {\n    dispatch({\n      type: \"EXCHANGE_INITIATED\",\n      payload: params,\n    });\n  };\n  const value = { settings, updateSettings, exchangeAmount };\n\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const SettingsConsumer = Consumer;\n\nexport default SettingsContext;\n","type Config = Record<string, string>;\n\nexport const NAMESPACE: string = \"currency-exchange\";\n\nexport const ENDPOINTS: Config = {\n  RATES: \"/latest\",\n  CURRENCIES: \"/currencies\",\n};\n\nexport const API: Record<string, string | Config> = {\n  REMOTE: \"//api.frankfurter.app\",\n  ENDPOINTS,\n  NAMESPACE,\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ScreenCentered } from \"../../components/styled\";\n\nexport const Home = () => {\n  return (\n    <ScreenCentered data-testid=\"home\">\n      <Button as={Link} to=\"/welcome\" className=\"block m-2\">\n        Start\n      </Button>\n    </ScreenCentered>\n  );\n};\n\nexport default Home","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ScreenCentered } from \"../../components/styled\";\n\nexport const Welcome = () => {\n  return (\n    <ScreenCentered>\n      <header>\n        <h1 className=\"text-4xl pb-2\">Welcome to Currency Exchange</h1>\n      </header>\n      <section className=\"text-center p-2\">\n        <p>Please select your preferred Currency in settings.</p>\n        <p>\n          We have set it ourselves to EUR and credited your account some initial\n          fund to play with the app\n        </p>\n\n        <small className=\"block italic\">\n          P.S. This fund can not be used to do any real purchase\n        </small>\n      </section>\n\n      <Button as={Link} to=\"/exchange\" className=\"m-2 inline-block\">\n        Exchange\n      </Button>\n    </ScreenCentered>\n  );\n};\n\nexport default Welcome;\n","import React from \"react\";\nimport loadable from \"@loadable/component\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { SettingsProvider } from \"./Contexts/Settings\";\n\nimport Home from \"@pages/Home/Home\";\nimport Welcome from \"@pages/Welcome/Welcome\";\nconst Balance = loadable(() => import(\"@pages/Balance/Balance\"));\nconst Exchange = loadable(() => import(\"@pages/Exchange/Exchange\"));\nconst Settings = loadable(() => import(\"@pages/Settings/Settings\"));\nconst Transactions = loadable(() => import(\"@pages/Transactions/Transactions\"));\n\nfunction App() {\n  return (\n    <SettingsProvider>\n      <div className=\"bg-gray-200\" data-testid=\"app\">\n        <div className=\"container min-h-screen p-2 box-border mx-auto relative text-center\">\n          <Router>\n            <Switch>\n              <Route path=\"/transactions\">\n                <Transactions />\n              </Route>\n              <Route path=\"/settings\">\n                <Settings />\n              </Route>\n              <Route path=\"/balance\">\n                <Balance />\n              </Route>\n              <Route path=\"/exchange\">\n                <Exchange />\n              </Route>\n              <Route path=\"/welcome\">\n                <Welcome />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </SettingsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}