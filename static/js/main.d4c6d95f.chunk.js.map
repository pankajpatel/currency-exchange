{"version":3,"sources":["components/styled/Button.ts","components/styled/Nav.ts","components/styled/ScreenCentered.ts","components/styled/FlexContainer.ts","pages/Home/Home.tsx","pages/Welcome/Welcome.tsx","reducers/rates.reducer.ts","config.ts","data/fetch.ts","data/rates.ts","reducers/settings.reducer.ts","Contexts/Settings.tsx","Contexts/Rates.tsx","pages/Exchange/styled.ts","components/ExchangeSeparator/styled.ts","components/ExchangeSeparator/ExchangeSeparator.tsx","components/Select/Select.tsx","components/AmountInput/AmountInput.tsx","components/ExchangeParticipant/ExchangeParticipant.tsx","reducers/exchange.reducer.ts","pages/Exchange/ExchangeUI.tsx","pages/Exchange/Exchange.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getClassNames","type","Button","styled","button","attrs","props","className","nav","ScreenCentered","div","FlexContainer","Home","data-testid","as","Link","to","Welcome","initialState","currency","loading","rates","ratesReducer","state","action","payload","ENDPOINTS","RATES","CURRENCIES","API","request","_url","method","body","url","headers","Headers","append","params","includes","JSON","stringify","fetch","then","response","status","json","getRates","from","search","URLSearchParams","api","toString","base","poll","currencies","balances","EUR","GBP","USD","transactions","settingsReducer","amount","fromBalance","toBalance","fromAmount","toAmount","updates","timestamp","Number","Date","SettingsContext","React","createContext","settings","updateSettings","exchangeAmount","Provider","SettingsProvider","Consumer","children","useReducer","dispatch","value","RatesContext","updateBaseCurrency","RatesProvider","useContext","SettingContext","useState","baseCurrency","setBaseCurrency","ratesData","timeout","useRef","useEffect","newPoll","current","setTimeout","a","clearTimeout","Container","InfoContainer","Balance","Message","Separator","SeparatorButton","CurrencySwitch","ExchangeSeparator","values","onSwitchClick","onClick","HTMLSelect","select","Select","onChange","defaultValue","target","map","key","Input","input","AmountInput","placeholder","ExchangeCurrency","ExchangeParticipant","onCurrencyChange","onAmountChange","toFixed","e","isNaN","rate","exchangeReducer","ExchangeUI","message","exchangeData","Object","keys","balance","CURRENCY_MAP","Exchange","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d4c6d95f.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst getClassNames = (type?: string): string => {\n  switch (type) {\n    case \"outline\":\n      return \"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\";\n    default:\n      return \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\";\n  }\n};\n\ntype Props = {\n  type?: string;\n};\n\nexport const Button = styled.button.attrs((props: Props) => ({\n  className: getClassNames(props.type),\n}))``;\n","import styled from \"styled-components\";\n\nexport const Nav = styled.nav``;\n","import styled from \"styled-components\";\n\nexport const ScreenCentered = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n`;","import styled from \"styled-components\";\n\nexport const FlexContainer = styled.div`\n  display: flex;\n  align-items: center;\n  & > * {\n    flex: 1 auto;\n    width: 50%;\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ScreenCentered } from \"../../components/styled\";\n\nexport const Home = () => {\n  return (\n    <ScreenCentered data-testid=\"home\">\n      <Button as={Link} to=\"/welcome\" className=\"block m-2\">\n        Start\n      </Button>\n    </ScreenCentered>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ScreenCentered } from \"../../components/styled\";\n\nexport const Welcome = () => {\n  return (\n    <ScreenCentered>\n      <header>\n        <h1 className=\"text-4xl pb-2\">Welcome to Currency Exchange</h1>\n      </header>\n      <section className=\"text-center p-2\">\n        <p>Please select your preferred Currency in settings.</p>\n        <p>\n          We have set it ourselves to EUR and credited your account some initial\n          fund to play with the app\n        </p>\n\n        <small className=\"block italic\">\n          P.S. This fund can not be used to do any real purchase\n        </small>\n      </section>\n\n      <Button as={Link} to=\"/exchange\" className=\"m-2 inline-block\">\n        Exchange\n      </Button>\n    </ScreenCentered>\n  );\n};\n","import { RatesState, Action, Reducer } from \"../types\";\n\nexport const initialState: RatesState = {\n  currency: \"EUR\",\n  loading: false,\n  rates: {},\n};\n\nexport const ratesReducer: Reducer<RatesState, Action> = (\n  state = initialState,\n  action\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case \"RATES_LOADING\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"RATES_RECEIVED\":\n      return {\n        ...state,\n        loading: false,\n        ...payload,\n      };\n    case \"BASE_CURRENCY_CHANGED\":\n      return {\n        ...state,\n        ...payload,\n      };\n    default:\n      return state;\n  }\n};\n","type Config = Record<string, string>;\n\nexport const NAMESPACE: string = \"currency-exchange\";\n\nexport const ENDPOINTS: Config = {\n  RATES: \"/latest\",\n  CURRENCIES: \"/currencies\",\n};\n\nexport const API: Record<string, string | Config> = {\n  REMOTE: \"//api.frankfurter.app\",\n  ENDPOINTS,\n  NAMESPACE,\n};\n","import { API } from \"../config\";\nimport { RatesResponse } from \"../types\";\n\nconst request = (\n  _url: string,\n  method = \"GET\",\n  body: BodyInit = \"\"\n): Promise<RatesResponse> => {\n  const url = `${API.REMOTE}${_url}`;\n  const headers = new Headers();\n  headers.append(\"Content-Type\", \"application/json\");\n  const params: RequestInit = {\n    method,\n    headers: headers,\n  };\n  if ([\"POST\", \"PUT\"].includes(method)) {\n    params.body = typeof body !== \"string\" ? JSON.stringify(body) : body;\n  }\n\n  return fetch(url, params).then((response) => {\n    const { status } = response;\n    if (status === 204) {\n      return {};\n    }\n    return response.json();\n  });\n};\n\nexport const getData = (url: string): Promise<RatesResponse> =>\n  request(url, \"GET\");\nexport const postData = (url: string, data: BodyInit) =>\n  request(url, \"POST\", data);\nexport const putData = (url: string, data: BodyInit) =>\n  request(url, \"PUT\", data);\nexport const deleteData = (url: string) => request(url, \"DELETE\");\n\nexport default {\n  get: getData,\n  post: postData,\n  put: putData,\n  delete: deleteData,\n};\n","import api from \"./fetch\";\nimport { ENDPOINTS } from \"../config\";\nimport { RatesResponse } from \"../types\";\n\nexport const getRates = (currency: string = \"\"): Promise<RatesResponse> => {\n  const params: Record<string, string> = {};\n  if (currency) {\n    params.from = currency;\n  }\n  const search = new URLSearchParams(params);\n\n  return api.get(`${ENDPOINTS.RATES}?${search.toString()}`);\n};\n","import { Reducer, Settings, Action, ExchangeParams } from \"../types\";\n\nexport const initialState: Settings = {\n  base: \"EUR\",\n  poll: 10 * 1000,\n  currencies: [\"EUR\", \"GBP\", \"USD\"],\n  balances: {\n    EUR: 100,\n    GBP: 0,\n    USD: 0,\n  },\n  transactions: [],\n};\n\nexport const settingsReducer: Reducer<Settings, Action> = (\n  state = initialState,\n  action\n) => {\n  const { type, payload } = action;\n  const { balances, transactions = [] } = state;\n  switch (type) {\n    case \"SETTINGS_UPDATED\":\n      return {\n        ...state,\n        ...payload,\n      };\n    case \"EXCHANGE_INITIATED\":\n      if (!payload?.from.amount || payload?.from.amount <= 0) {\n        return state;\n      }\n      if (!payload?.from.currency || !payload?.to.currency) {\n        return state;\n      }\n      const fromBalance = balances[payload?.from.currency];\n      if (fromBalance < payload?.from.amount) {\n        return state;\n      }\n      const toBalance = balances[payload?.to.currency];\n      const fromAmount = payload?.from.amount;\n      const toAmount = payload?.to.amount;\n      const updates = {\n        balances: {\n          [payload?.from.currency]: fromBalance - fromAmount,\n          [payload?.to.currency]: toBalance + toAmount,\n        },\n        transactions: [\n          {\n            ...(payload as ExchangeParams),\n            timestamp: Number(new Date()),\n          },\n          ...transactions,\n        ],\n      };\n      return { ...state, ...updates };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer, PropsWithChildren } from \"react\";\nimport { settingsReducer, initialState } from \"../reducers/settings.reducer\";\nimport { SettingsContextType, ExchangeParams } from \"../types\";\n\nconst SettingsContext = React.createContext<SettingsContextType>({\n  settings: initialState,\n  updateSettings: () => {},\n  exchangeAmount: () => {},\n});\n\nconst { Provider, Consumer } = SettingsContext;\n\nexport const SettingsProvider = ({ children }: PropsWithChildren<{}>) => {\n  const [settings, dispatch] = useReducer(settingsReducer, initialState);\n\n  const updateSettings = (payload: object) => {\n    dispatch({\n      type: \"SETTINGS_UPDATED\",\n      payload,\n    });\n  };\n  const exchangeAmount = (params: ExchangeParams) => {\n    dispatch({\n      type: \"EXCHANGE_INITIATED\",\n      payload: params,\n    });\n  };\n  const value = { settings, updateSettings, exchangeAmount };\n\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const SettingsConsumer = Consumer;\n\nexport default SettingsContext;\n","import React, {\n  useRef,\n  useState,\n  useEffect,\n  useReducer,\n  useContext,\n  PropsWithChildren,\n} from \"react\";\nimport { ratesReducer, initialState } from \"../reducers/rates.reducer\";\nimport { getRates } from \"../data/rates\";\nimport { RatesContextType } from \"../types\";\nimport SettingContext from \"./Settings\";\n\nconst RatesContext = React.createContext<RatesContextType>({\n  ...initialState,\n  updateBaseCurrency: () => {},\n});\n\nconst { Provider, Consumer } = RatesContext;\n\nexport const RatesProvider = ({ children }: PropsWithChildren<{}>) => {\n  const { settings } = useContext(SettingContext);\n  const [baseCurrency, setBaseCurrency] = useState<string>(settings.base);\n  const [ratesData, dispatch] = useReducer(ratesReducer, initialState);\n  const timeout = useRef<number>(0);\n\n  useEffect(() => {\n    const stopRunningPoll = () => {\n      timeout.current && clearTimeout(timeout.current);\n    };\n    const newPoll = () => {\n      timeout.current = setTimeout(poll, settings.poll);\n    };\n\n    const poll = () => {\n      dispatch({\n        type: \"RATES_LOADING\",\n      });\n      (async () => {\n        const { rates = {} } = await getRates(baseCurrency);\n        newPoll();\n        dispatch({\n          type: \"RATES_RECEIVED\",\n          payload: { rates, currency: baseCurrency },\n        });\n      })();\n    };\n\n    poll();\n\n    return stopRunningPoll;\n  }, [settings.poll, baseCurrency]);\n\n  return (\n    <Provider\n      value={{\n        ...ratesData,\n        updateBaseCurrency: setBaseCurrency,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport const RatesConsumer = Consumer;\nexport default RatesContext;\n","import styled from \"styled-components\";\nimport { FlexContainer } from \"../../components/styled\";\n\nexport const Container = styled.div`\n  max-width: 320px;\n  padding: 1rem 0;\n  border: 1px solid #efefef;\n  border-radius: 10px;\n  box-shadow: 0 0 10px 0 rgba(100, 100, 100, 0.3);\n`;\nexport const InfoContainer = styled(FlexContainer)`\n  font-size: 0.8rem;\n  opacity: 0.8;\n  padding: 0 1rem;\n`;\nexport const Balance = styled.div`\n  text-align: left;\n  padding-left: 0.4rem;\n`;\n\nexport const Message = styled.div`\n  text-align: right;\n  padding-right: 0.4rem;\n`;\n","import styled from \"styled-components\";\n\nexport const Separator = styled.div`\n  position: relative;\n  height: 1px;\n  margin: 2rem 0;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  background: #dfdfdf;\n`;\n\nexport const SeparatorButton = styled.button`\n  border: 1px solid #dfdfdf;\n  outline: none;\n  border-radius: 1rem;\n  padding: 0 0.5rem;\n  background: white;\n  transform: translateY(-50%);\n  margin-left: 15%;\n  &:focus,\n  &:active {\n    outline: none;\n    box-shadow: 0 0 5px 0 rgba(100, 100, 100, 0.2);\n  }\n`;\n\nexport const CurrencySwitch = styled(SeparatorButton)`\n  --size: 1.8rem;\n  width: var(--size);\n  height: var(--size);\n  line-height: var(--size);\n  border-radius: 50%;\n  position: absolute;\n  padding: 0;\n  left: 0;\n`;\n","import React from \"react\";\nimport { Separator, SeparatorButton, CurrencySwitch } from \"./styled\";\n\ntype Props = {\n  values: Record<string, string>;\n  onSwitchClick: Function;\n};\n\nexport const ExchangeSeparator = ({ values, onSwitchClick }: Props) => {\n  return (\n    <Separator data-testid=\"separator\">\n      <CurrencySwitch\n        onClick={() => onSwitchClick()}\n        data-testid=\"separator-switch-button\"\n      >\n        ⇅\n      </CurrencySwitch>\n      <SeparatorButton>\n        {values.from} → {values.to}\n      </SeparatorButton>\n    </Separator>\n  );\n};\n","import React, { ReactElement, ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nconst HTMLSelect = styled.select`\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background: transparent;\n`;\n\ntype Props = {\n  currencies: string[];\n  value?: string;\n  onChange?: Function;\n};\n\nexport const Select = ({\n  currencies,\n  value = \"\",\n  onChange = () => {},\n}: Props): ReactElement => (\n  <div>\n    <HTMLSelect\n      data-testid=\"currency-select\"\n      defaultValue={value}\n      onChange={({ target: { value } }: ChangeEvent<HTMLSelectElement>) =>\n        onChange(value)\n      }\n    >\n      {currencies.map((currency) => (\n        <option key={currency}>{currency}</option>\n      ))}\n    </HTMLSelect>\n  </div>\n);\n","import React, { ReactElement, InputHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\n\nexport const Input = styled.input`\n  text-align: right;\n  position: relative;\n  &:before {\n    content: \"-\";\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`;\n\nexport const AmountInput = (\n  props: InputHTMLAttributes<HTMLInputElement>\n): ReactElement => (\n  <div>\n    <Input type=\"tel\" placeholder=\"0\" {...props} data-testid=\"amount-input\" />\n  </div>\n);\n","import React, { ChangeEvent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { Select } from \"../Select/Select\";\nimport { AmountInput } from \"../AmountInput/AmountInput\";\nimport { ExchangeState } from \"../../types\";\nimport { FlexContainer } from \"../styled\";\n\nconst ExchangeCurrency = styled(FlexContainer)`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  & > * > input,\n  & > * > select {\n    font-size: 2rem;\n    max-width: 100%;\n    display: block;\n    background: transparent;\n    outline: none;\n  }\n`;\n\nexport const ExchangeParticipant = ({\n  state,\n  currencies,\n  children = null,\n  onCurrencyChange = () => {},\n  onAmountChange = () => {},\n}: PropsWithChildren<{\n  state: ExchangeState;\n  currencies: string[];\n  onCurrencyChange?: Function;\n  onAmountChange?: Function;\n}>) => {\n  const value = state.amount ? Number(state.amount.toFixed(2)) : \"\";\n  return (\n    <>\n      <ExchangeCurrency data-testid=\"exchange-participant\">\n        <Select\n          key={state.currency}\n          value={state.currency}\n          currencies={currencies}\n          onChange={onCurrencyChange}\n        />\n        <AmountInput\n          key={state.amount || 0}\n          defaultValue={value}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const value = Number(e.target.value);\n            if (isNaN(value)) {\n              return;\n            }\n            onAmountChange(value);\n          }}\n        />\n      </ExchangeCurrency>\n      {children}\n    </>\n  );\n};\n","import { ExchangeState, Action, Reducer } from \"../types\";\n\nexport const initialState: Record<string, ExchangeState | null | number> = {\n  from: {\n    amount: null,\n    currency: \"EUR\",\n  },\n  to: {\n    amount: null,\n    currency: \"GBP\",\n  },\n  rate: null,\n};\n\nexport const exchangeReducer: Reducer<Record<string, any>, Action> = (\n  state = initialState,\n  action\n) => {\n  const { type, payload = {} } = action;\n  const value = payload.value;\n  const rate = state.rate || 0;\n  switch (type) {\n    case \"EXCHANGE_SWITCHED\":\n      return {\n        ...state,\n        from: state.to,\n        to: state.from,\n      };\n    case \"BASE_CURRENCY_UPDATED\":\n      return {\n        ...state,\n        to:\n          state.to.currency === value\n            ? {\n                amount: state.to.amount,\n                currency: state.from.currency,\n              }\n            : state.to,\n        from: {\n          ...state.from,\n          currency: value,\n        },\n      };\n    case \"SECONDARY_CURRENCY_UPDATED\":\n      return {\n        ...state,\n        from:\n          state.from.currency === value\n            ? {\n                amount: state.from.amount,\n                currency: state.to.currency,\n              }\n            : state.from,\n        to: {\n          ...state.to,\n          currency: value,\n        },\n      };\n    case \"BASE_AMOUNT_UPDATED\":\n      return {\n        ...state,\n        from: {\n          ...state.from,\n          amount: isNaN(value) ? 0 : value,\n        },\n        to: {\n          ...state.to,\n          amount: rate ? value * rate : state.to.amount,\n        },\n      };\n    case \"SECONDARY_AMOUNT_UPDATED\":\n      return {\n        ...state,\n        from: {\n          ...state.from,\n          amount: rate ? value / rate : state.from.amount,\n        },\n        to: {\n          ...state.to,\n          amount: isNaN(value) ? 0 : value,\n        },\n      };\n    case \"RATES_UPDATED\":\n      return {\n        ...state,\n        rate: payload.rates[state.to.currency] || rate,\n      };\n    case \"RESET_EXCHANGE\":\n      return {\n        ...state,\n        from: {\n          ...state.from,\n          amount: 0,\n        },\n        to: {\n          ...state.to,\n          amount: 0,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useContext, useReducer, useEffect } from \"react\";\nimport RatesContext from \"../../Contexts/Rates\";\nimport SettingsContext from \"../../Contexts/Settings\";\nimport { Button, ScreenCentered } from \"../../components/styled\";\nimport { Container, InfoContainer, Message, Balance } from \"./styled\";\nimport { RatesContextType, SettingsContextType } from \"../../types\";\nimport { ExchangeSeparator } from \"../../components/ExchangeSeparator/ExchangeSeparator\";\nimport { ExchangeParticipant } from \"../../components/ExchangeParticipant/ExchangeParticipant\";\nimport { exchangeReducer, initialState } from \"../../reducers/exchange.reducer\";\ntype Props = {\n  currencies: Record<string, string>;\n};\n\nexport const ExchangeUI = ({ currencies }: Props) => {\n  const ratesData = useContext<RatesContextType>(RatesContext);\n  const { settings, exchangeAmount } = useContext<SettingsContextType>(\n    SettingsContext\n  );\n  let message: string | null = null;\n  const [exchangeData, dispatch] = useReducer(exchangeReducer, {\n    ...initialState,\n    from: {\n      currency: settings.base,\n      amount: null,\n    },\n  });\n\n  useEffect(() => {\n    dispatch({\n      type: \"RATES_UPDATED\",\n      payload: {\n        rates: ratesData.rates,\n      },\n    });\n  }, [ratesData]);\n\n  useEffect(() => {\n    dispatch({ type: \"RESET_EXCHANGE\" });\n  }, [settings.balances]);\n\n  const CURRENCIES = Object.keys(currencies);\n  const balance = settings.balances[exchangeData.from.currency];\n\n  if (exchangeData.from.amount > balance) {\n    message = \"Insufficient Balance\";\n  }\n\n  const switchCurrencies = () => {\n    dispatch({\n      type: \"EXCHANGE_SWITCHED\",\n    });\n  };\n\n  const updateBaseCurrency = (value: string) => {\n    ratesData.updateBaseCurrency(value);\n    dispatch({\n      type: \"BASE_CURRENCY_UPDATED\",\n      payload: { value },\n    });\n  };\n  const updateSecondaryCurrency = (value: string) => {\n    dispatch({\n      type: \"SECONDARY_CURRENCY_UPDATED\",\n      payload: { value },\n    });\n  };\n  const updateBaseAmount = (value: number) => {\n    dispatch({\n      type: \"BASE_AMOUNT_UPDATED\",\n      payload: { value },\n    });\n  };\n  const updateSecondaryAmount = (value: number) => {\n    dispatch({\n      type: \"SECONDARY_AMOUNT_UPDATED\",\n      payload: { value },\n    });\n  };\n\n  const makeExchange = () => exchangeAmount(exchangeData);\n\n  return (\n    <>\n      <ScreenCentered>\n        <Container>\n          <ExchangeParticipant\n            state={exchangeData.from}\n            currencies={CURRENCIES}\n            onCurrencyChange={updateBaseCurrency}\n            onAmountChange={updateBaseAmount}\n          >\n            <InfoContainer>\n              <Balance>Balance: {balance}</Balance>\n              <Message>{message || \"\"}</Message>\n            </InfoContainer>\n          </ExchangeParticipant>\n          <ExchangeSeparator\n            values={{\n              from: `${currencies[exchangeData.from.currency]} 1`,\n              to: `${currencies[exchangeData.to.currency]} ${\n                exchangeData.rate\n              }`,\n            }}\n            onSwitchClick={switchCurrencies}\n          />\n          <ExchangeParticipant\n            state={exchangeData.to}\n            currencies={CURRENCIES}\n            onCurrencyChange={updateSecondaryCurrency}\n            onAmountChange={updateSecondaryAmount}\n          >\n            <InfoContainer>\n              <Balance>\n                Balance: {settings.balances[exchangeData.to.currency]}\n              </Balance>\n            </InfoContainer>\n          </ExchangeParticipant>\n          <Button className=\"m-2 inline-block\" onClick={makeExchange}>\n            Exchange\n          </Button>\n        </Container>\n      </ScreenCentered>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { RatesProvider } from \"../../Contexts/Rates\";\nimport { ExchangeUI } from \"./ExchangeUI\";\n\nconst CURRENCY_MAP = {\n  EUR: \"€\",\n  GBP: \"£\",\n  USD: \"$\",\n};\n\nexport const Exchange = () => (\n  <RatesProvider>\n    <ExchangeUI currencies={CURRENCY_MAP} />\n    <Link to=\"/settings\">Settings</Link>\n  </RatesProvider>\n);\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Home } from \"./pages/Home/Home\";\nimport { Welcome } from \"./pages/Welcome/Welcome\";\nimport { Exchange } from \"./pages/Exchange/Exchange\";\nimport { SettingsProvider } from \"./Contexts/Settings\";\n\nfunction App() {\n  return (\n    <SettingsProvider>\n      <div className=\"bg-gray-200\" data-testid=\"app\">\n        <div className=\"container min-h-screen p-2 box-border mx-auto relative text-center\">\n          <Router>\n            <Switch>\n              <Route path=\"/exchange\">\n                <Exchange />\n              </Route>\n              <Route path=\"/welcome\">\n                <Welcome />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </SettingsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}